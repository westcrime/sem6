/**
 * We keep this function minimized so if using two instances of this
 *   library, where one is minimized and one is not, it will still work
 *   with `hasConstructorOf`.
 * With ES6 classes, we may be able to simply use `class TypesonPromise
 *   extends Promise` and add a string tag for detection.
 * @template T
 */
export class TypesonPromise<T> {
    /**
     * @param {(
     *   resolve: (value: any) => any,
     *   reject: (reason?: any) => void
     * ) => void} f
     */
    constructor(f: (resolve: (value: any) => any, reject: (reason?: any) => void) => void);
    p: Promise<any>;
    /**
     *
     * @param {?(value: T) => any} [onFulfilled]
     * @param {(reason?: any) => void} [onRejected]
     * @returns {TypesonPromise<T>}
     */
    then(onFulfilled?: ((value: T) => any) | null | undefined, onRejected?: ((reason?: any) => void) | undefined): TypesonPromise<T>;
    /**
     *
     * @param {(reason?: any) => void} onRejected
     * @returns {TypesonPromise<T>}
     */
    catch(onRejected: (reason?: any) => void): TypesonPromise<T>;
}
export namespace TypesonPromise {
    const __typeson__type__: string;
    /**
     * @template T
     * @param {T} v
     * @returns {TypesonPromise<T>}
     */
    function resolve<T_1>(v: T_1): TypesonPromise<T_1>;
    /**
     * @template T
     * @param {any} v
     * @returns {TypesonPromise<T>}
     */
    function reject<T_2>(v: any): TypesonPromise<T_2>;
    /**
     *
     * @template T
     * @param {(TypesonPromise<T>|Promise<T>|any)[]} promArr
     * @returns {TypesonPromise<T>}
     */
    function all<T_3>(promArr: any[]): TypesonPromise<T_3>;
    /**
     * @template T
     * @param {(TypesonPromise<T>|Promise<T>|null)[]} promArr
     * @returns {TypesonPromise<T>}
     */
    function race<T_4>(promArr: (TypesonPromise<T_4> | Promise<T_4> | null)[]): TypesonPromise<T_4>;
    /**
     * @template T
     * @param {(TypesonPromise<T>|Promise<T>|null)[]} promArr
     * @returns {TypesonPromise<T>}
     */
    function allSettled<T_5>(promArr: (TypesonPromise<T_5> | Promise<T_5> | null)[]): TypesonPromise<T_5>;
}
//# sourceMappingURL=TypesonPromise.d.ts.map